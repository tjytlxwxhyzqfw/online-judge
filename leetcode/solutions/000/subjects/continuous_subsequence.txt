continuous_subsequence.txt
(sliding_window)

from disscuss of 930:
----------------------

Here are some similar sliding window problems.
Also find more explanations.
Good luck and have fun.

1248 Count Number of Nice Subarrays
1234 Replace the Substring for Balanced String
1004 Max Consecutive Ones III
930 Binary Subarrays With Sum
992 Subarrays with K Different Integers
904 Fruit Into Baskets


template from disscuss of 76: https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-'substring'-problems

from my white board:

76, 395, 713, 845

新理解(191228, from 930)
-----------------------

连续子序列计数类的问题, 不是一个"符合"/"不符合"的问题, 而是"多于"和"少于"的问题.
(符合=等于, 不符合=多于或少于, 这是错误的)

正确的分类:
	(1) 少于等于&多于
    (2) 少于&多于等于

技术器是啥? 这类题目, 一般都有一个计数器, 对滑动窗口内每个字符的数目进行计数.
连续子序列就是滑动窗口, 它的重要性质就是滑动窗口内每个字符出现的次数.

以下讨论忽略"等于"的情况.

以930为例子, 它的过程其实是这样的:

考虑到滑动窗口很难处理"等于"的情况, 所以问题转化为求解<=的情况

在"少于"的时候, 右指针不断右移, 直到"多于". 此时, 左指针右移, 直到"少于"!!!

统计以右指针指向处的元素为结尾的序列的数目!!!

并列出伪代码如下:

符合条件的子序列数目C=0
for 右=0; 右<N; ++右 {
	更新计数器
	while 多于 {
		左++ && 更新计数器
	}

	// 此时停下来, 必然有 count([左, 右])少于阈值
	// 且, 任意"中", 左<=中<=右, count([中, 右])少于阈值
	// 计算以右为结尾的符合条件的子序列的数目, 并添加到总数中
    C += 右-左+1
}

思考: 如果转化成>=的情况呢?

0 0 1 0 0 1 0 0

符合条件的子序列数目C=0
for 右=0; 右<N; ++右 {
	更新计数器
	while 多于或等于 {
		++C
		左++ && 更新计数器
	}
}

随着右指针不断右移动, 计数器里面的数字是不断增大的;
930时, 多于就等于不合格, 所以此时左指针右移, 找到第一个合格的.
但是雨果我要找"多于等于", 那么"少于"就是不合格. 
"不合格"的时候, 左指针要右移, 这个模板就没用了.
"合格"的时候, 左指针右移呢? 右移能找到一个更小的合格窗口, 但是并不能起到计数的作用?

1. 基础1: 滑动窗口内的字符出现次数的计数
2. 推论1: 左指针固定, 随着右指针不断右移, 计数器变大.
3. 基础2: 对于计数问题, 要统计以右指针结尾的连续子序列数目.
4. 结论1: 对于计数问题, 一般有这样的性质, 若[左, 右]满足条件, 则对于左<=中<=右, [中, 右]满足条件, 那么对于每一个右指针, 左指针移动到##第一个##满足条件的地方, 就能够添加计数: 右-左+1.
5. 结论2: 对于最短窗口类问题, 一般有这样的性质, 若[左, 右]满足条件, 则X<=左, [X, 右]满足条件, 那么, 总可以先右移右指针到满足条件处, 再收缩左指针来缩短窗口. (可以证明总能找到最短的窗口)

