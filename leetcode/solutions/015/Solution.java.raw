/**
 * 15 3Sum 5553/672
 * Performance: speed=%, memory=%
 */

import java.util.*;

public class Solution {
	public List<List<Integer>> threeSum(int[] nums) {
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(nums);
		for (int i = 0; i < nums.length-1; ++i) {
			if (nums[i] != nums[i+1]) continue;
			if (i-1 >= 0 && nums[i] == nums[i-1]) continue;
			int t = 0 - nums[i] - nums[i+1];
			if (i+2 < nums.length) {
				int p = Arrays.binarySearch(nums, i+2, nums.length, t);
				if (p >= 0) list.add(Arrays.asList(nums[i], nums[i+1], nums[p]));
			}
			if (i > 0) {
				int q = Arrays.binarySearch(nums, 0, i, t);
				if (q >= 0) list.add(Arrays.asList(nums[q], nums[i], nums[i+1]));
			}
		}

		int n = 1;
		for (int i = 1; i < nums.length; ++i) if (nums[i] != nums[n-1]) nums[n++] = nums[i];

		for (int i = 0; i < n; ++i) {
			for (int j = i+1; j < n-1; ++j) {
				int t = 0 - nums[i] - nums[j];
				int p = Arrays.binarySearch(nums, j+1, n, t);
				if (p >= 0) list.add(Arrays.asList(nums[i], nums[j], nums[p]));
			}
		}

		return list;
	}

	public static void main(String args[]) {
		Solution s = new Solution();
		System.out.println(s.threeSum(new int[]{1, 1, -2}));
		System.out.println(s.threeSum(new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0}));
		System.out.println(s.threeSum(new int[]{
			-1, -1, -1, -2, -2, -2, -3, -3, -3, 2, 2, 2, 4, 4, 4, 6, 6, 6, 3, 3, 3, 5, 5, 5, 4, 4, 4}));
		System.out.println(s.threeSum(new int[]{-4, -4, -2, -2, -2, 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 4, 6, 6}));
		System.out.println("done");
	}
}

