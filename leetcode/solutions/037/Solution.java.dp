import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Solution {

	private boolean s[][][][] = new boolean[9][9][9][512];

	private int maskRows[] = new int[9];
	private int maskCols[] = new int[9];
	private int maskSqrs[][] = new int[3][3];

	private char board[][];

	public void solveSudoku(char[][] board) {
		this.board = board;
		for (int y = 0; y < 9; ++y) {
			for (int x = 0; x < 9; ++x) {
				char ch = board[y][x];
				if (ch == '.')
					continue;
				int num = ch - '1';
				int bit = (1 << num);

				maskRows[y] |= bit;
				maskCols[x] |= bit;
				maskSqrs[y/3][x/3] |= bit;
			}
		}

		for (int i = 0; i < 9; ++i) {
			for (int mask = 0; mask < 512; ++mask) {
				boolean ok = ((mask & (1<<i)) == 0);
				s[8][8][i][mask] = ok;
				//printS(8, 8, i, mask);
			}
		}

		for (int y = 8; y >= 0; --y) {
			for (int x = 8; x >= 0; --x) {
				if (y == 8 && x == 8)
					continue;
				for (int i = 0; i < 9; ++i) {
					int stat = 0;
					for (int mask = 0; mask < 512; ++mask) {
						dpFill(y, x, i, mask);
						if (s[y][x][i][mask] == true)
							++stat;
					}
				}
			}
		}
	}

	private void dpFill(int y, int x, int i, int mask) {
		char ch = board[y][x];
		if (ch != '.' && i != (ch-'1')) {
			s[y][x][i][mask] = false;
			return;
		}

		int bit = 1 << i;
		boolean ok = ((mask & bit) == 0);
		if (!ok) {
			s[y][x][i][mask] = false;
			return;
		}


		int xx = (x+1)%9; 
		int yy = (xx == 0 ? y+1 : y);

		int maskBase = maskGen(yy, xx);
		int maskNxt = maskBase | mask;

		if (x == xx || y == yy || (x/3 == xx/3 && y/3 == yy/3))
			maskBase |= bit;

		ok = false;
		for (int j = 0; j < 9; ++j) {
			ok = ok || s[yy][xx][j][maskBase];
		}
		s[y][x][i][mask] = ok;
	}

	private int maskGen(int y, int x) {
		int mask = 0;

		char ch = board[y][x];
		if (ch == '.') {
			mask = maskRows[y] | maskCols[x] | maskSqrs[y/3][x/3];
		} else {
			int num = ch - '1';
			mask = ~(mask | (1<<num));
			mask &= 511;
		}

		return mask;
	}

	private void printS(int y, int x, int i, int mask) {
		System.out.printf("[%3d, %3d, %3d, %3d]: %5s", y, x, i, mask, s[y][x][i][mask]);
		System.out.printf("\tmask: %s\n", maskString(mask));
	}

	private String maskString(int mask) {
		StringBuilder sb = new StringBuilder();
		for (int j = 0; j < 9; ++j) {
			char ch = ((mask & (1<<j)) == 0 ? '*' : (char)('0'+j));
			sb.append(ch);
		}
		return sb.toString();
	}

	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		char board[][] = new char[9][9];
		for (int y = 0; y < 9; ++y) {
			String line = scanner.next();
			for (int x = 0; x < 9; ++x) {
				board[y][x] = line.charAt(x);
			}
		}

		Solution solution = new Solution();

		solution.solveSudoku(board);
		for (int y = 0; y < 9; ++y) {
			for (int x = 0; x < 9; ++x)
				System.out.printf("%c", solution.board[y][x]);
			System.out.printf("\n");
		}

		int mask00 = solution.maskGen(0, 0);
		for (int i = 0; i < 9; ++i)
			solution.printS(0, 0, i, mask00);
	}
}
