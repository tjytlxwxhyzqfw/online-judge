   8 15.5%  Medium 2085/11270 String to Integer (atoi)
  28 35.0%    Easy Implement strStr()
  48 59.1%  Medium Rotate Image

  68 29.1%    Hard Text Justification
 ------
 I: 我估计用一个模拟的策略就出来了
    n个空白分成m份怎么分? 
    for (int i = 0; i < m; ++i) {
    	int k = m-i;
    	space[i] = n/k + (n % k == 0 ? 0 : 1);
    	n -= space[i];
    }
    例如, n=8, m=3, 分成: 8/3+1, 5/2+1, 2/1+0
 D: 差评太多, 先不看了

 128 45.9%    Hard Longest Consecutive Sequence
------
I: "连续"这个概念已经出现过很多次了, HashMap是个不错的方法.
   (1) 我一直有一个构思中的UF解, 奈何, UF不太会;
   (2) 高票解非常巧妙: 考虑一队连续自然数的第一个被发现(hash[x-1]=null), 
   	   这时候顺着它往下找就行了. 这样的话是个O(n)的解法.

 148 45.6%  Medium Sort List
------
I: 归并排序

 188 29.1%    Hard Best Time to Buy and Sell Stock IV
----

I: 

buy[0][0] = -p[0]
sel[0][0] = 0 // todo

for j = 0; j < k; ++j {
    buy[0][j] = j == 0 ? -p[0] : 0;
    sel[0][j] = 0;
	for i = 1; i < p.length; ++i {
		buy[i][j] = max{
			buy[i-1][j],
			(j == 0 ? 0 : sel[i-1][j-1]) - p[i]
		}
		sel[i][j] = max{
			sel[i-1][j],
			buy[i-1][j] + p[i]
		}
	}
}

写完之后我觉得还是写的保守一点把.
第一行和第一列提前初始化好吧.

敢不敢大胆一点? 尝试用一维数组?

for j = 0; j < k; ++j {
	buy[0] = j == 0 ? -p[0]; 0;
	sel[0] = 0;
	for i = 0; i < p.length; ++i {
		buy[i] = max{buy[i-1], sel[i-1][j-1] - p[i]} // sel[i-1][j-1]引用不到了
		sel[i] = max{sel[i], buy[i-1]+p[i]}
	}
}

所以也不太好引用.

D: 人家用了一个DP数组, 并没有用两个, 怎么回事???

 208 51.3%  Medium Implement Trie (Prefix Tree)
------

 228 42.0%    Easy Summary Ranges
------

 328 56.8%  Medium Odd Even Linked List
------

 368 38.1%  Medium Largest Divisible Subset
------
I: O(n^2): 排序之后向前找因子?
D: 是的

 388 42.4%  Medium Longest Absolute File Path
------

~~~

 468 24.7%  Medium Validate IP Address
------
回忆几个java接口:
String[] parts = str.split("."); // startsWith(), endsWith()
String.parseInteger() (错)
String.parseInt()     (对)

排序: 
// TODO: 对吗?
Arrays.sort(a, new Comparator<int[]>() {
	@Override
	public int compare(int[] left, int[] rght) { return left[1] - rght[1]; }
})

 508 58.8%  Medium Most Frequent Subtree Sum
------
I: 能不能用bucket? 给我绕晕了!!! 但是总之也不难把!!!

 528 44.4%  Medium 1186/2743 Random Pick with Weight
------
I: 我就生成[0, sum]之间的一个数s1, 然后就累加, 第一次超过s1的, 就是我要返回的;
D: 你生成一个前缀和数组, 这样的话, 这次查找就能够用二分去优化了. (可以可以可以)

 648 58.1%  Medium Replace Words
------
I: trie => 很重要的数据结构啊. 可以上小本本不.

 688 49.8%  Medium Knight Probability in Chessboard
------
I: DP或者记忆化搜索. 记忆化搜索好像更直观一点

dfs(row, col, k) {
	if row, col not in the board
		return 0
	for all 8 target dest:
		prob[row][col][k] = .125 * dfs(dst.row, dst.col, k-1)
}

D: 
上述答案不加记忆化搜索的话, 肯定是TLE的
最高票说是用的DP, 但是其实他也是记忆化搜索.


 768 49.6%    Hard Max Chunks To Make Sorted II
------
I:
prefixMax[i] = [0, i]这个闭区间上的最大值
suffixMin[i] = [i, n-1]这个闭区间上的最小值
for (int i = 0; i < a.length; ++i) {
	if prefixMax[i] <= suffixMin[i] {
		count++
	}
}
D: 一样的
有人说思路根763相同, 我看不相同

 808 40.7%  Medium 196/610 Soup Servings
------
I:

prob[a][b] -> .25 * sum{
	prob[a-100][b]
	prob[a-75][b-25]
	prob[a-50][b-50]
	prob[a-25][b-75]
}

初始: a=b=N
关键: N越大, 那么A先空的概率就越大
N大到一定程度, A先空的概率和1就会小于1e-6
(PS: 印象好深刻啊这道题)

D: N=4800
注意: (1) prob[a][b]可以直接表示: a先空或者.5倍的a和b同时空
(2) 记忆化搜索比DP来的更简单 (有一类题记忆化搜索明显更好)
(3) 可以按照25为1个单位, 进一步压缩空间

这题虽然骂声一片, 但是, 背后隐藏的思想其实很有趣.

 848 45.1%  Medium 364/69 Shifting Letters
------

I: 后缀和之后, 直接加上, 然后%26就行了啊 => 逆序遍历会更快
D: 一样的思路

 948 46.2%  Medium Bag of Tokens
------
I: 要读懂这个题目有点难啊我去

把所有的牌子从小到大排序
贪心策略: 换power的时候, {p-=min, score+=1} {score-=1, p+=max} if p >= min: p = p-min+max-min
(不太好保证它的正确性)
然后, 我二分直接搜索答案空间: nlogn

这个贪心策略不纠结了, 很难保证正确性.

dp[i] = max {
	dp[i-1]
	dp[i-1]+1
}

=> 好难 => 不想了 

D: 

其他办法都想不出解 => 只能信任你的贪心策略了!
(要有信心, 首先, 你能肯定这个题没有其他解, 这已经很棒了)

如果用了贪心的话,  也就不用搜索了, 直接双指针也就行了...

好消息: 首页上有人使用我的思路的呀

 988 46.5%  Medium 583/114 Smallest String Starting From Leaf
------
I: 递归太容易解了!! 非递归的话, 也有很多办法, 比如用栈遍历. 反正只要遍历完了就能解
D: 踩到陷阱了!!!

root=x
左子树最小值: abd
右子树最小值: ab (第二小: abc)
这时候, root的最小值我会选: abx, 但是其实真正的最小值是: abcx

所以啊, 还是DFS最保险.
再直接一点: ab < abc 但是都加一个字母之后: abz > abcz, 懂了吧

 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   8 15.5%  Medium 2085/11270 String to Integer (atoi)
------

  28 35.0%    Easy Implement strStr()
------

  48 59.1%  Medium 4192/309 Rotate Image
------
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly.
DO NOT allocate another 2D matrix and do the rotation.
Constraints:
(1) matrix.length == n
(2) matrix[i].length == n
(3) 1 <= n <= 20
(4) -1000 <= matrix[i][j] <= 1000

  68 29.1%    Hard 879/1825 Text Justification
------
[粪]
Given an array of words and a width maxWidth, format the text such that each line has exactly
maxWidth characters and is fully (left and right) justified. You should pack your words in a greedy
approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary
so that each line has exactly maxWidth characters. Extra spaces between words should be distributed
as evenly as possible. If the number of spaces on a line do not divide evenly between words, the
empty slots on the left will be assigned more spaces than the slots on the right. For the last line
of text, it should be left justified and no extra space is inserted between words.
Note:
(1) A word is defined as a character sequence consisting of non-space characters only.
(2) Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
(3) The input array words contains at least one word.
Constraints:
(1) 1 <= words.length <= 300
(2) 1 <= words[i].length <= 20
(3) words[i] consists of only English letters and symbols.
(4) 1 <= maxWidth <= 100
(5) words[i].length <= maxWidth

 128 45.9%    Hard 4550/221 Longest Consecutive Sequence
 ------
 Given an unsorted array of integers nums, return the length of the longest consecutive elements
 sequence. Constraints: (1) 0 <= nums.length <= 10^4; (2) -10^9 <= nums[i] <= 10^9.
 Follow up: Could you implement the O(n) solution?
 Example: [1 -1 2 -1 3] => 3

 148 45.6%  Medium 3809/163 Sort List
------
Given the head of a linked list, return the list after sorting it in ascending order.
Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

 188 29.1%    Hard 2185/135 Best Time to Buy and Sell Stock IV
------
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
Design an algorithm to find the maximum profit. You may complete at most k transactions.
Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the
stock before you buy again).
Constraints: (1) 0 <= k <= 100; (2) 0 <= prices.length <= 1000; (3) 0 <= prices[i] <= 1000;

 208 51.3%  Medium Implement Trie (Prefix Tree)
 ------

 228 42.0%    Easy Summary Ranges
 ------

 328 56.8%  Medium 2735/330 Odd Even Linked List
 ------
 [无聊]
 Given a singly linked list, group all odd nodes together followed by the even nodes. Please note
 here we are talking about the node number and not the value in the nodes. You should try to do it
 in place. The program should run in O(1) space complexity and O(nodes) time complexity.

 368 38.1%  Medium 1702/86 Largest Divisible Subset
 ------
 Given a set of distinct positive integers nums, return the largest subset answer such that every
 pair (answer[i], answer[j]) of elements in this subset satisfies: answer[i] % answer[j] == 0, or
 answer[j] % answer[i] == 0. If there are multiple solutions, return any of them.
 Constraints:
 (1) 1 <= nums.length <= 1000
 (2) 1 <= nums[i] <= 2 * 10^9
 (3) All the integers in nums are unique

 388 42.4%  Medium 688/1641 Longest Absolute File Path
 ------
 If we were to write this representation in code, it will look like this:
 "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext".
 Note that the '\n' and '\t' are the new-line and tab characters. Every file and directory has a
 unique absolute path in the file system, which is the order of directories that must be opened to
 reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute
 path to file2.ext is "dir/subdir2/subsubdir2/file2.ext".
 Constraints:
 (1) 1 <= input.length <= 104
 (2) input may contain lowercase or uppercase English letters, a new line character '\n', a tab
     character '\t', a dot '.', a space ' ', and digits.

 468 24.7%  Medium Validate IP Address
 508 58.8%  Medium Most Frequent Subtree Sum
 528 44.4%  Medium Random Pick with Weight
 648 58.1%  Medium Replace Words
 688 49.8%  Medium Knight Probability in Chessboard
 768 49.6%    Hard Max Chunks To Make Sorted II
 808 40.7%  Medium Soup Servings
 848 45.1%  Medium Shifting Letters
 948 46.2%  Medium Bag of Tokens
